import{_ as e,f as r,h as a,M as t}from"./app.c1b432c2.js";const b=JSON.parse('{"title":"设计","description":"","frontmatter":{},"headers":[{"level":2,"title":"不要重复造轮子","slug":"不要重复造轮子","link":"#不要重复造轮子","children":[{"level":3,"title":"CSS / SCSS","slug":"css-scss","link":"#css-scss","children":[]},{"level":3,"title":"Atomic CSS 原子化 CSS","slug":"atomic-css-原子化-css","link":"#atomic-css-原子化-css","children":[]},{"level":3,"title":"CSS-IN-JS","slug":"css-in-js","link":"#css-in-js","children":[]},{"level":3,"title":"JavaScript","slug":"javascript","link":"#javascript","children":[]},{"level":3,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[]},{"level":3,"title":"Vue","slug":"vue","link":"#vue","children":[]},{"level":3,"title":"UniApp","slug":"uniapp","link":"#uniapp","children":[]},{"level":3,"title":"Nest","slug":"nest","link":"#nest","children":[]}]},{"level":2,"title":"TypeScript 优先","slug":"typescript-优先","link":"#typescript-优先","children":[]},{"level":2,"title":"函数式编程优先","slug":"函数式编程优先","link":"#函数式编程优先","children":[]},{"level":2,"title":"组合优先","slug":"组合优先","link":"#组合优先","children":[]},{"level":2,"title":"意图优先","slug":"意图优先","link":"#意图优先","children":[]},{"level":2,"title":"适当抽象","slug":"适当抽象","link":"#适当抽象","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"guide/design.md","lastUpdated":1671518933000}'),l={name:"guide/design.md"},i=t('<h1 id="设计" tabindex="-1">设计 <a class="header-anchor" href="#设计" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>该部分需要完善。</p></div><p>我们追求的不仅是实现、完成功能，还是优雅地实现、完成功能。本章节主要关注代码和功能设计。</p><h2 id="不要重复造轮子" tabindex="-1">不要重复造轮子 <a class="header-anchor" href="#不要重复造轮子" aria-hidden="true">#</a></h2><p>社区内已经有大量优秀资源，99% 的问题都不需要自行造轮子解决或自己造的轮子不如已有的轮子。请优先使用社区优秀资源。</p><h3 id="css-scss" tabindex="-1">CSS / SCSS <a class="header-anchor" href="#css-scss" aria-hidden="true">#</a></h3><ul><li><a href="https://github.com/css-modules/css-modules#readme" target="_blank" rel="noreferrer">CSS Modules</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*" target="_blank" rel="noreferrer">CSS Variables</a></li></ul><h3 id="atomic-css-原子化-css" tabindex="-1">Atomic CSS 原子化 CSS <a class="header-anchor" href="#atomic-css-原子化-css" aria-hidden="true">#</a></h3><ul><li><a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">tailwindcss</a></li><li><a href="https://github.com/unocss/unocss" target="_blank" rel="noreferrer">unocss</a> 只能使用 icon</li></ul><h3 id="css-in-js" tabindex="-1">CSS-IN-JS <a class="header-anchor" href="#css-in-js" aria-hidden="true">#</a></h3><ul><li><a href="https://emotion.sh/" target="_blank" rel="noreferrer">emotion</a></li><li><a href="https://vanilla-extract.style/" target="_blank" rel="noreferrer">vanilla-extract</a></li></ul><h3 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-hidden="true">#</a></h3><ul><li><a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">axios</a> - 请求</li><li><a href="https://lodash.com/" target="_blank" rel="noreferrer">lodash</a> - 工具类</li><li><a href="https://ramdajs.com/" target="_blank" rel="noreferrer">ramda</a> - 工具类</li><li><a href="https://dayjs.gitee.io/" target="_blank" rel="noreferrer">dayjs</a> - 日期时间</li><li><a href="https://github.com/blakeembrey/change-case" target="_blank" rel="noreferrer">change-case</a> - 命名法</li><li><a href="https://browser-update.org/" target="_blank" rel="noreferrer">browser-update</a> - 浏览器更新</li></ul><h3 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h3><ul><li><a href="https://github.com/sindresorhus/type-fest" target="_blank" rel="noreferrer">type-fest</a> - 类型集合</li></ul><h3 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-hidden="true">#</a></h3><ul><li><a href="https://cn.vuejs.org/style-guide/" target="_blank" rel="noreferrer">Vue 风格指南</a></li><li><a href="https://router.vuejs.org/zh/" target="_blank" rel="noreferrer">vue-router</a> - 路由</li><li><a href="https://pinia.vuejs.org/zh/" target="_blank" rel="noreferrer">pinia</a> - 状态管理</li><li><a href="https://vueuse.org/" target="_blank" rel="noreferrer">vue-use</a> - 组合式集合</li><li><a href="https://tanstack.com/query" target="_blank" rel="noreferrer">@tanstack/query</a> - 管理请求</li><li><a href="https://element-plus.org/" target="_blank" rel="noreferrer">element-plus</a> - UI 库</li><li><a href="https://vant-ui.github.io/vant/" target="_blank" rel="noreferrer">vant</a> - UI 库</li><li><a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">vite</a> - 构建工具</li></ul><h3 id="uniapp" tabindex="-1">UniApp <a class="header-anchor" href="#uniapp" aria-hidden="true">#</a></h3><p>尽量避开 <code>uni_modules</code> 等非公共标准。</p><h3 id="nest" tabindex="-1">Nest <a class="header-anchor" href="#nest" aria-hidden="true">#</a></h3><p>无需特意遵循 <a href="https://www.jsonrpc.org/" target="_blank" rel="noreferrer">JSON-RPC</a> 或 <a href="https://restfulapi.net/" target="_blank" rel="noreferrer">Restful API</a>，但可以参考 Restful 做目录划分。</p><h2 id="typescript-优先" tabindex="-1">TypeScript 优先 <a class="header-anchor" href="#typescript-优先" aria-hidden="true">#</a></h2><p>在实践中我们发现，通过正确书写 TypeScript 构建出来的程序要比通过正确书写 JavaScript 构建出来的程序要更健壮。得益于 TypeScript 的类型系统，程序维护、迭代也更为容易。</p><p>请阅读 <a href="https://ts.xcatliu.com/" target="_blank" rel="noreferrer">TypeScript 入门教程</a>、<a href="https://ts.yayujs.com/" target="_blank" rel="noreferrer">TypeScript 中文教程</a> 和 <a href="https://jkchao.github.io/typescript-book-chinese/" target="_blank" rel="noreferrer">深入理解 TypeScript</a>，确保你有基本的 TypeScript 研发能力。</p><p>请不要在代码内做非必要的类型体操以炫耀技术，这会影响整体研发效率。</p><h2 id="函数式编程优先" tabindex="-1">函数式编程优先 <a class="header-anchor" href="#函数式编程优先" aria-hidden="true">#</a></h2><p>在实践中我们发现，函数式编程能有效减少问题出现。请阅读 <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/" target="_blank" rel="noreferrer">JavaScript 函数式编程指南</a>，确保你有基本的函数式编程能力。</p><h2 id="组合优先" tabindex="-1">组合优先 <a class="header-anchor" href="#组合优先" aria-hidden="true">#</a></h2><p>我们提倡组合优先。如果一个功能值得分成两个函数实现，那绝不要放在一个函数内实现。这有利于解除耦合，为函数做测试，同时也给予更强的组合性。</p><h2 id="意图优先" tabindex="-1">意图优先 <a class="header-anchor" href="#意图优先" aria-hidden="true">#</a></h2><p>我们提倡命名时优先使用意图，如 <code>sum</code>、<code>sub</code> 等，不提倡使用描述，如 <code>process</code> 等。</p><p>注明意图使人更容易理解代码。在必要时，可以使用 <a href="https://jsdoc.app/" target="_blank" rel="noreferrer">JSDoc</a> 作为补充。</p><h2 id="适当抽象" tabindex="-1">适当抽象 <a class="header-anchor" href="#适当抽象" aria-hidden="true">#</a></h2><p>在实践中我们发现，适当抽象有利于提高代码健壮性。</p><p>“适当抽象”本身就是一个抽象的描述，如果代码满足以下的规律，可尝试做适当抽象。</p><ol><li>代码相对稳定，预计在一个月内不会出现完全推翻重做的情况。</li><li>代码已经重复出现 3 次或以上，且重复率在 60% 或以上。</li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://weread.qq.com/web/bookDetail/f5e32ee0811e36886g01018d" target="_blank" rel="noreferrer">代码整洁之道</a></li><li><a href="https://weread.qq.com/web/bookDetail/81132f5071cc7f7a81151c9" target="_blank" rel="noreferrer">代码精进之路：从码农到工匠</a></li><li><a href="https://book.douban.com/subject/30468597/" target="_blank" rel="noreferrer">重构：改善既有代码的设计</a></li><li><a href="https://book.douban.com/subject/35006892/" target="_blank" rel="noreferrer">程序员修炼之道</a></li></ul>',38),s=[i];function n(h,c,o,d,p,u){return r(),a("div",null,s)}const g=e(l,[["render",n]]);export{b as __pageData,g as default};
