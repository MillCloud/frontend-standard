import{_ as e,f as a,h as r,M as s}from"./app.c1b432c2.js";const m=JSON.parse('{"title":"研发","description":"","frontmatter":{},"headers":[{"level":2,"title":"Microsoft Azure DevOps","slug":"microsoft-azure-devops","link":"#microsoft-azure-devops","children":[]},{"level":2,"title":"YesDev","slug":"yesdev","link":"#yesdev","children":[]},{"level":2,"title":"模板","slug":"模板","link":"#模板","children":[]},{"level":2,"title":"Git Workflow","slug":"git-workflow","link":"#git-workflow","children":[]},{"level":2,"title":"语义化提交","slug":"语义化提交","link":"#语义化提交","children":[]},{"level":2,"title":"代码审查","slug":"代码审查","link":"#代码审查","children":[]},{"level":2,"title":"异常监控","slug":"异常监控","link":"#异常监控","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"guide/development.md","lastUpdated":1671518933000}'),l={name:"guide/development.md"},t=s(`<h1 id="研发" tabindex="-1">研发 <a class="header-anchor" href="#研发" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>该部分需要完善。</p></div><p>研发就是研究与开发。本章节主要带领了解研发流程。</p><h2 id="microsoft-azure-devops" tabindex="-1"><a href="https://azure.microsoft.com/en-us/products/devops/" target="_blank" rel="noreferrer">Microsoft Azure DevOps</a> <a class="header-anchor" href="#microsoft-azure-devops" aria-hidden="true">#</a></h2><p>你可以查阅它的文档了解它的最佳实践。</p><p>关于 DevOps 的实践还可以参考 <a href="https://devops.phodal.com/" target="_blank" rel="noreferrer">Ledge</a> 和 <a href="https://developer.aliyun.com/topic/download?id=205" target="_blank" rel="noreferrer">阿里巴巴 DevOps 实践手册</a>。</p><h2 id="yesdev" tabindex="-1"><a href="https://www.yesdev.cn/" target="_blank" rel="noreferrer">YesDev</a> <a class="header-anchor" href="#yesdev" aria-hidden="true">#</a></h2><p>你可以查阅它的文档了解它的最佳实践。</p><h2 id="模板" tabindex="-1">模板 <a class="header-anchor" href="#模板" aria-hidden="true">#</a></h2><p>司内提供 <a href="https://gitee.com/MillCloud/presets" target="_blank" rel="noreferrer">Gitee</a> 和 <a href="https://github.com/MillCloud/presets" target="_blank" rel="noreferrer">GitHub</a> 模板供快速启动开发，内含最佳实践。</p><h2 id="git-workflow" tabindex="-1">Git Workflow <a class="header-anchor" href="#git-workflow" aria-hidden="true">#</a></h2><p>在实践中我们发现，<a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noreferrer">Git Flow</a> 过于复杂，<a href="https://docs.github.com/en/get-started/quickstart/github-flow" target="_blank" rel="noreferrer">GitHub Flow</a> 又过于简单，而 <a href="https://docs.gitlab.cn/ee/topics/gitlab_flow.html" target="_blank" rel="noreferrer">GitLab Flow</a> 的简易变体能很好地适应各种情况。我们这里提倡的 Git Workflow 就是 GitLab Flow 的一种变体。</p><p>只需要两类分支：主分支 main 和开发类分支 dev。</p><ol><li>每次研发一个新功能，或修复一个问题时，先到 YesDev 上添加任务，再到 Microsoft Azure DevOps 对应的仓库中，从主分支 main 分叉出一个开发分支，以 <code>feat-</code> 或 <code>fix-</code> 开头，用英文描述这个分支要处理的事情。例子：<code>feat-watermark</code>（研发水印功能）、<code>fix-watermark</code>（修复水印功能）。</li><li>在开发分支完成开发并自测通过后，在 Microsoft Azure DevOps 发起 PR 合并到主分支 main，要求至少有一个相关负责人参与代码审查并通过。随后在 YesDev 上标记任务完成，并删除对应的开发分支。</li><li>主分支合并一些功能和修复后，再次自测，无发现问题时，可打标签 tag 并发布，部署到预生产环境再行测试。</li><li>预生产环境无发现问题时，可部署到生产环境。</li><li>如果预生产环境和生产环境发现问题，可重复步骤 1 - 4。生产环境发现问题，应先回滚，安排修复后再行部署。</li></ol><p>有关 YesDev，请查看 <a href="#yesdev">YesDev</a> 章节。</p><p>有关 Microsoft Azure DevOps，请查看 <a href="#microsoft-azure-devops">Microsoft Azure DevOps</a> 章节。</p><p>有关代码和功能设计，请查看 <a href="./design.html">设计</a> 章节。</p><p>有关提交，请查看 <a href="#%E8%AF%AD%E4%B9%89%E5%8C%96%E6%8F%90%E4%BA%A4">语义化提交</a> 部分。</p><p>有关代码审查，请查看 <a href="#%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5">代码审查</a> 部分。</p><p>有关测试，请查看 <a href="./test.html">测试</a> 章节。</p><p>有关发布，请查看 <a href="./release.html">发布</a> 章节。</p><h2 id="语义化提交" tabindex="-1">语义化提交 <a class="header-anchor" href="#语义化提交" aria-hidden="true">#</a></h2><p>我们提倡将工作分解成一个个独立但完整的提交，多提交、多推送。这能使开发脉络更加清晰，也允许方便地回滚代码到一个特定时间，或者还原一段代码而不影响到其它无关变更。</p><p>提交时，信息需遵循语义化提交 <a href="https://www.conventionalcommits.org/" target="_blank" rel="noreferrer">Conventional Commits</a> 。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#c9d1d9;">&lt;type&gt;[optional scope]: &lt;description&gt;</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">[optional body]</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">[optional footer(s)]</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>下面是一些示例。</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki"><code><span class="line"><span style="color:#c9d1d9;">chore(release): v1.0.0</span></span>
<span class="line"><span style="color:#c9d1d9;">chore(deps): update deps</span></span>
<span class="line"><span style="color:#c9d1d9;">chore: update deps</span></span>
<span class="line"><span style="color:#c9d1d9;">style: format</span></span>
<span class="line"><span style="color:#c9d1d9;">style: add spaces</span></span>
<span class="line"><span style="color:#c9d1d9;">fix: prevent racing of requests</span></span>
<span class="line"><span style="color:#c9d1d9;">feat!: require node &gt;= 14.18</span></span>
<span class="line"><span style="color:#c9d1d9;">perf: improve code</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>type 只允许取以下值。</p><ul><li><code>build</code> - 影响构建系统或外部依赖关系的更改，如 <code>npm</code>，<code>yarn</code> 等</li><li><code>chore</code> - 构建过程或辅助工具和库的更改，基本弃用，可用于表示发布 <code>release</code></li><li><code>ci</code> - 更改 <code>ci</code> 配置文件和脚本，如 <code>flow-ci</code>、<code>travis-ci</code>、<code>circle-ci</code>、<code>jerkins</code> 等</li><li><code>docs</code> - 更改文档</li><li><code>feat</code> - 新功能</li><li><code>fix</code> - 问题修复</li><li><code>perf</code> - 优化</li><li><code>refactor</code> - 重构代码，既没有问题修复，也没有增加功能</li><li><code>revert</code> - 回滚代码</li><li><code>style</code> - 不影响代码含义的更改，如空格、格式化、缺失分号</li><li><code>test</code> - 增加测试或修改当前测试</li></ul><p>description 应简洁明确地描述本次提交的意图。</p><details class="details custom-block"><summary>常见反例</summary><p>❌ fix: fix a bug</p><p>✅ fix: 修复了没有正确处理支付回调的问题</p><p><code>fix a bug</code> 非常模糊不清，必须要看通代码才清楚修复了什么问题，而 <code>修复了没有正确处理支付回调的问题</code> 则一目了然。简洁明确地描述本次提交的意图能使开发脉络更加清晰，有利于代码审查。中英文均可，不做强制要求。</p></details><p>无需死记硬背，可借助 <a href="https://commitlint.js.org/" target="_blank" rel="noreferrer">commitlint</a>、<a href="https://typicode.github.io/husky/" target="_blank" rel="noreferrer">husky</a>、<a href="https://github.com/ModyQyW/fabric" target="_blank" rel="noreferrer">@modyqyw/fabric</a> 来完成自动检查，也可借助 <a href="https://marketplace.visualstudio.com/items?itemName=adam-bender.commit-message-editor" target="_blank" rel="noreferrer">Commit Message Editor</a> 或 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> 完成这一工作。</p><h2 id="代码审查" tabindex="-1">代码审查 <a class="header-anchor" href="#代码审查" aria-hidden="true">#</a></h2><p>我们提倡对新加入的研发人员做下班前的代码审查，以帮助其尽快融入团队；对其他成员做每周、每月或里程碑代码审查。</p><p>代码审查有利于减少漏洞，共享知识技能，提倡所有人都应尽量参与。</p><p>代码审查主要针对代码和功能设计，风格方面由 <a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a>、<a href="https://stylelint.io/" target="_blank" rel="noreferrer">Stylelint</a>、<a href="https://prettier.io/" target="_blank" rel="noreferrer">Prettier</a>、<a href="https://github.com/ModyQyW/fabric" target="_blank" rel="noreferrer">@modyqyw/fabric</a> 等工具加以约束。</p><p>有关代码和功能设计，请查看 <a href="./design.html">设计</a> 章节。</p><h2 id="异常监控" tabindex="-1">异常监控 <a class="header-anchor" href="#异常监控" aria-hidden="true">#</a></h2><p>我们提倡使用 <a href="https://sentry.io/" target="_blank" rel="noreferrer">sentry</a> 监控预生产环境和生产环境的异常。</p><p>对于预生产环境，应 2 - 3 天检查处理异常。</p><p>对于生产环境，应设置报警阈值，在收到报警时马上处理，平时 1 - 2 天检查处理异常。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://sspai.com/post/71658" target="_blank" rel="noreferrer">工作流的祛魅：从工具、阅读到写作</a></li><li><a href="https://www.edrawsoft.cn/mindmaster/tutorial/how-draw-mindmap/" target="_blank" rel="noreferrer">3 分钟带你快速入门思维导图</a></li><li><a href="https://time.geekbang.org/column/intro/100022301" target="_blank" rel="noreferrer">10x 程序员工作法</a></li></ul>`,43),n=[t];function o(i,p,c,d,h,f){return a(),r("div",null,n)}const b=e(l,[["render",o]]);export{m as __pageData,b as default};
